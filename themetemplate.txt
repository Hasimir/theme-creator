{{define "theme"}}
;;; {{.themename}}-theme.el --- Emacs 24 theme with a light background.
;; {{.author}}
;; {{.url}}
;; Version: 0.2
;; Package-Requires: ((emacs "24"))
;; Emacs theme with a light background.
;; Copyright (C) 2014 , {{.author}}

;;; Commentary:

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;; This file is not part of Emacs.

;;; Code:

(deftheme {{.themename}})
 (let ((fg1 {{.deffacefg}})
       (fg2 {{.fore2}})
       (fg3 {{.fore3}})
       (fg4 {{.fore4}})
       (bg1 {{.deffacebg}})
       (bg2 {{.back2}})
       (bg3 {{.back3}})
       (bg4 {{.back4}})
       (key2 {{.key2}})
       (key3 {{.key3}})
       (builtin {{.builtinface}})
       (keyword {{.keywordface}})
       (const   {{.constantface}})
       (comment {{.commentface}})
       (func    {{.functionnameface}})
       (str     {{.stringface}})
       (type    {{.typeface}})
       (var     {{.variableface}})
       (warning {{.warningface}}))
   (custom-theme-set-faces
   '{{.themename}}
        `(default ((t (:background ,bg1 :foreground ,fg1))))
        `(font-lock-builtin-face ((t (:foreground ,builtin))))
        `(font-lock-comment-face ((t (:foreground ,comment))))
	`(font-lock-negation-char-face ((t (:foreground ,const))))
	`(font-lock-reference-face ((t (:foreground ,const))))
	`(font-lock-constant-face ((t (:foreground ,const))))
        `(font-lock-doc-face ((t (:foreground ,comment))))
        `(font-lock-function-name-face ((t (:foreground ,func :bold t))))
        `(font-lock-keyword-face ((t (:bold t :foreground ,keyword))))
        `(font-lock-string-face ((t (:foreground ,str))))
        `(font-lock-type-face ((t (:foreground ,type }}))))
        `(font-lock-variable-name-face ((t (:foreground ,var))))
        `(font-lock-warning-face ((t (:foreground ,warning :background ,bg2))))
        `(region ((t (:background ,fg3 :foreground ,bg2))))
        `(highlight ((t (:foreground ,fg3 :background ,bg3))))
	`(hl-line ((t (:background  ,bg2))))
	`(fringe ((t (:background ,bg2 :foreground ,fg4))))
	`(cursor ((t (:background ,bg3))))
        `(show-paren-match-face ((t (:background ,warning))))
        `(isearch ((t (:bold t :foreground ,warning :background ,bg3))))
        `(mode-line ((t (:box (:line-width 1 :color nil :style released-button) :bold t :foreground ,fg4 :background ,bg2))))
        `(mode-line-inactive ((t (:box (:line-width 1 :color nil :style pressed-button) :foreground ,fg2 :background ,bg1)))
        `(mode-line-buffer-id ((t (:bold t :foreground ,fg2 :background nil))))
	`(mode-line-highlight ((t (:background ,bg4))))
	`(vertical-border ((t (:foreground ,fg3))))
        `(minibuffer-prompt ((t (:bold t :foreground ,keyword))))
        `(default-italic ((t (:italic t))))
	`(link ((t (:foreground ,const :underline t))))
	`(org-code ((t (:foreground ,fg2))))
	`(org-hide ((t (:foreground ,fg4))))
        `(org-level-1 ((t (:bold t :foreground ,fg2 :height 1.1))))
        `(org-level-2 ((t (:bold nil :foreground ,fg3))))
        `(org-level-3 ((t (:bold t :foreground ,fg4))))
        `(org-level-4 ((t (:bold nil :foreground ,bg4))))
        `(org-date ((t (:underline t :foreground ,var) )))
        `(org-footnote  ((t (:underline t :foreground ,fg4))))
        `(org-link ((t (:underline t :foreground ,type ))))
        `(org-special-keyword ((t (:foreground ,func))))
        `(org-verbatim ((t (:foreground ,bg3 :underline t :slant italic))))
        `(org-block ((t (:foreground ,fg3))))
        `(org-quote ((t (:inherit org-block :slant italic))))
        `(org-verse ((t (:inherit org-block :slant italic))))
        `(org-todo ((t :foreground ,keyword :bold t)))
        `(org-done ((t (:bold t :foreground ,bg4))))
        `(org-warning ((t (:underline t :foreground ,warning))))
        `(org-agenda-structure ((t (:weight bold :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
        `(org-agenda-date ((t (:foreground ,var :height 1.1 ))))
        `(org-agenda-date-weekend ((t (:weight normal :foreground ,fg4))))
        `(org-agenda-date-today ((t (:weight bold :foreground ,keyword :height 1.4))))
	`(org-scheduled ((t (:foreground ,type))))
	`(org-ellipsis ((t (:foreground ,builtin))))
	`(org-verbatim ((t (:foreground ,fg4))))
        `(org-document-info-keyword ((t (:foreground ,func))))
	`(font-latex-bold-face ((t (:foreground ,type))))
	`(font-latex-italic-face ((t (:foreground ,key3 :italic t))))
	`(font-latex-string-face ((t (:foreground ,str))))
	`(font-latex-match-reference-keywords ((t (:foreground ,const))))
	`(font-latex-match-variable-keywords ((t (:foreground ,var))))
	`(ido-only-match ((t (:foreground ,warning))))
	`(org-sexp-date ((t (:foreground ,fg4))))
	`(ido-first-match ((t (:foreground ,keyword :bold t))))
	`(gnus-header-content ((t (:foreground ,keyword))))
	`(gnus-header-from ((t (:foreground ,var))))
	`(gnus-header-name ((t (:foreground ,type))))
	`(gnus-header-subject ((t (:foreground ,func :bold t))))
	`(magit-item-highlight ((t (:background ,bg3))))
	`(mu4e-view-url-number-face ((t (:foreground ,type))))
	`(mu4e-cited-1-face ((t (:foreground ,fg2))))
	`(mu4e-cited-7-face ((t (:foreground ,fg3))))
	`(mu4e-header-marks-face ((t (:foreground ,type))))
	`(ffap ((t (:foreground ,fg4))))
	`(js2-private-function-call ((t (:foreground ,const))))
	`(js2-jsdoc-html-tag-delimiter ((t (:foreground ,str))))
	`(js2-jsdoc-html-tag-name ((t (:foreground ,key2))))
	`(js2-external-variable ((t (:foreground ,const  ))))
	`(warning ((t (:foreground ,warning))))
	`(ac-completion-face ((t (:underline t :foreground ,keyword))))
	`(info-quoted-name ((t (:foreground ,builtin))))
	`(info-string ((t (:foreground ,str))))
	`(icompletep-determined ((t :foreground ,builtin)))
        `(undo-tree-visualizer-register-face ((t :foreground ,keyword)))
        `(undo-tree-visualizer-default-face ((t :foreground ,fg2)))
        `(undo-tree-visualizer-unmodified-face ((t :foreground ,var)))
	`(slime-repl-inputed-output-face ((t (:foreground ,type))))
        `(magit-process-ok ((t :foreground ,type)))
        `(trailing-whitespace ((t :foreground nil :background ,warning)))
        `(rainbow-delimiters-depth-1-face ((t :foreground ,fg1)))
        `(rainbow-delimiters-depth-2-face ((t :foreground ,type)))
        `(rainbow-delimiters-depth-3-face ((t :foreground ,var)))
        `(rainbow-delimiters-depth-4-face ((t :foreground ,const)))
        `(rainbow-delimiters-depth-5-face ((t :foreground ,keyword)))
        `(rainbow-delimiters-depth-6-face ((t :foreground ,fg1)))
        `(rainbow-delimiters-depth-7-face ((t :foreground ,type)))
        `(rainbow-delimiters-depth-8-face ((t :foreground ,var)))
        `(rainbow-delimiters-unmatched-face ((t :foreground ,warning))))))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme '{{.themename}})

;; Local Variables:
;; no-byte-compile: t
;; End:

;;; {{.themename}}-theme.el ends here
{{end}}
